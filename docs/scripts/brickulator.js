// DO NOT EDIT: This file is automatically generated by the project's build task
'use strict';
var BC = BC || {};
let setDB;

const ebaySellingFeePercentage = .13, // TODO: Get this from a lookup
      oneMinute = 60000, // in milliseconds
      threeMinutes = oneMinute * 3, // in milliseconds
      oneHour = oneMinute * 60,
      currentDomain = window.location.hostname,
      localStorageKeys = {
        authToken: 'bcUserAuthToken',
        userSettings: 'bcUserSettings'
      },
      apiMapping = {
        'localhost': 'http://localhost:5000',
        'kevinmpowell.github.io': 'https://brickulator-api.herokuapp.com'
      },
      apiDomain = apiMapping[currentDomain],
      customEvents = {
        userSignedIn: 'bc-user-signed-in',
        userSignedOut: 'bc-user-signed-out'
      }; // in milliseconds


      // Headers and params are optional
      // makeRequest({
      //   method: 'GET',
      //   url: 'http://example.com'
      // })
      // .then(function (datums) {
      //   return makeRequest({
      //     method: 'POST',
      //     url: datums.url,
      //     params: {
      //       score: 9001
      //     },
      //     headers: {
      //       'X-Subliminal-Message': 'Upvote-this-answer'
      //     }
      //   });
      // })
      // .catch(function (err) {
      //   console.error('Augh, there was an error!', err.statusText);
      // });

BC.App = function() {
  const userSignedInClass = 'bc--user-signed-in',
        userSignedOutClass = 'bc--user-signed-out',
        plusMemberSignedInClass = 'bc--plus-member-signed-in';
  let body;

  function setBodyClass(userState) {
    const userSettings = BC.Utils.getFromLocalStorage(localStorageKeys.userSettings);

    if (userState === 'signedIn') {
      body.classList.remove(userSignedOutClass);
      body.classList.add(userSignedInClass); 
    } else {
      body.classList.remove(userSignedInClass); 
      body.classList.add(userSignedOutClass);
    }

    if (userSettings !== null && userSettings.plus_member) {
      body.classList.add(plusMemberSignedInClass);
    } else {
      body.classList.remove(plusMemberSignedInClass);
    }
  }

  const setSignedInState = function setSignedInState() {
    BC.Utils.validateAuthToken().then(function(){
      setBodyClass('signedIn');
      BC.Utils.broadcastEvent(customEvents.userSignedIn);
    }, function() {
      setBodyClass('signedOut');
      BC.Utils.broadcastEvent(customEvents.userSignedOut);
      // BC.Overlay.show("Not currently signed in", "This is an annoying message and should not be shown on page load.", true);
    });
  }

  const signOut = function signOut() {
    BC.Utils.removeFromLocalStorage(localStorageKeys.authToken);
    BC.Utils.removeFromLocalStorage(localStorageKeys.userSettings);
    setSignedInState();
  }

  const initialize = function initialize() {
    body = document.body;
    setSignedInState();
  }

  return {
    initialize: initialize,
    signOut: signOut,
    setSignedInState: setSignedInState
  };
}();

BC.API = function() {
  const makeRequest = function makeRequest (opts) {
    const apiUrl = apiDomain + opts.url;
    return new Promise(function (resolve, reject) {
      var xhr = new XMLHttpRequest();
      xhr.open(opts.method, apiUrl);
      xhr.onload = function () {
        if (this.status >= 200 && this.status < 300) {
          resolve(xhr.response);
        } else {
          reject({
            status: this.status,
            statusText: xhr.statusText
          });
        }
      };
      xhr.onerror = function () {
        reject({
          status: this.status,
          statusText: xhr.statusText
        });
      };
      if (opts.headers) {
        Object.keys(opts.headers).forEach(function (key) {
          xhr.setRequestHeader(key, opts.headers[key]);
        });
      }
      var params = opts.params;
      // We'll need to stringify if we've been given an object
      // If we have a string, this is skipped.
      if (params && typeof params === 'object') {
        params = Object.keys(params).map(function (key) {
          return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
        }).join('&');
      }
      xhr.send(params);
    });
  }

  return {
    makeRequest: makeRequest
  }
}();

BC.Utils = function() {
  const checkAuthTokenEndpoint = '/auth/validate-token';

  const formatCurrency = function formatCurrency(number) {
    return number.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
  }

  const getPayPalTransactionFee = function getPayPalTransactionFee(finalValue) {
    const payPalTransactionPercent = 2.9,
          payPalPerTransactionCharge = 0.3;
    return ((payPalTransactionPercent / 100) * finalValue) + payPalPerTransactionCharge;
  }

  const getBrickOwlSellerFees = function getBrickOwlSellerFees(finalValue) {
    const brickOwlCommissionPercent = 2.5,
          payPalTransactionFee = getPayPalTransactionFee(finalValue),
          fee = ((brickOwlCommissionPercent / 100) * finalValue) + payPalTransactionFee;
    return fee;
  }

  const getBricklinkSellerFees = function getBricklinkSellerFees(finalValue) {
    const range0_500Percent = 3,
          range500_1000Percent = 2,
          range1000AndUpPercent = 1,
          payPalTransactionFee = getPayPalTransactionFee(finalValue);

    let fee;

    if (finalValue > 1000) {
      fee = 25 + ((finalValue - 1000) * (range1000AndUpPercent / 100));
    } else if (finalValue > 500) {
      fee = 15 + ((finalValue - 500) * (range500_1000Percent / 100));
    } else {
      fee = finalValue * (range0_500Percent / 100);
    }

    return fee + payPalTransactionFee;
  }

  const getEbaySellerFees = function getEbaySellerFees(finalValue) {
    // TODO: Actually make this work
    const ebayCommissionPercent = 10,
          payPalTransactionFee = getPayPalTransactionFee(finalValue),
          fee = Math.min(((ebayCommissionPercent / 100) * finalValue), 750) + payPalTransactionFee;
    return fee;
  }

  const saveToLocalStorage = function saveToLocalStorage(key, value) {
    if (typeof value !== "string") {
      value = JSON.stringify(value);
    }
    localStorage.setItem(key, value);
  }

  const removeFromLocalStorage = function removeFromLocalStorage(key) {
    localStorage.removeItem(key);
  }

  const getFromLocalStorage = function getFromLocalStorage(key) {
    let value = localStorage.getItem(key);
    try {
      value = JSON.parse(value);
    } catch(e) {
      // Eat the JSON.parse failure, just return the value
      // console.log("Value wasn't JSON, just returning as is.");
    }
    return value;
  }

  const validateAuthToken = function validateAuthToken() {
    const storedToken = getFromLocalStorage(localStorageKeys.authToken);
    let haveValidToken = false;

    if (storedToken !== null) {
      return BC.API.makeRequest({
          method: 'GET', 
          url: '/auth/validate-token', 
          headers:{
            'Authorization': storedToken
          }});
      // TODO, maybe wire up default promise.then failure?
    } else {
      broadcastEvent('bc-auth-token-invalid');
      return Promise.reject(new Error('Stored Token does not exist'));
    }
  }

  const broadcastEvent = function broadcastEvent(eventName, data, element) {
    data = typeof data !== 'undefined' ? data : {};
    element = typeof element !== 'undefined' ? element : document;

    const event = new CustomEvent(eventName, {detail: data});
    element.dispatchEvent(event);
  }

  return {
    formatCurrency: formatCurrency,
    getBricklinkSellerFees: getBricklinkSellerFees,
    getBrickOwlSellerFees: getBrickOwlSellerFees,
    getEbaySellerFees: getEbaySellerFees,
    saveToLocalStorage: saveToLocalStorage,
    getFromLocalStorage: getFromLocalStorage,
    removeFromLocalStorage: removeFromLocalStorage,
    validateAuthToken: validateAuthToken,
    broadcastEvent: broadcastEvent
  }
}();

BC.SetDatabase = function() {
  const loadingSpinner = document.querySelector(".bc-spinner--loading-set-data"),
        loadingSpinnerVisibleClass = "bc-spinner--visible",
        setDataCachedMessage = document.querySelector(".bc-lookup-set-data-status-message"),
        setDataCachedMessageHiddenClass = "bc-lookup-set-data-status-message--hidden";
  function saveSetDBToLocalStorage(rawJSON) {
    localStorage.clear();
    localStorage.setItem("BCSetDB", rawJSON);
  }

  function showLoadingSpinner() {
    loadingSpinner.classList.add(loadingSpinnerVisibleClass);
    setDataCachedMessage.classList.add(setDataCachedMessageHiddenClass);
  }

  function hideLoadingSpinner() {
    loadingSpinner.classList.remove(loadingSpinnerVisibleClass);
    setDataCachedMessage.classList.remove(setDataCachedMessageHiddenClass);
  }

  const retrieveFreshSetData = function retrieveFreshSetData() {
    var request = new XMLHttpRequest();

    showLoadingSpinner();
    try {
      request.open('GET', apiDomain + '/lego_sets', true);
      request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

      request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
          // Success!
          var data = JSON.parse(request.responseText);
          data.dataRetrieved = Date.now();
          saveSetDBToLocalStorage(JSON.stringify(data));
          setDB = data;
          BC.Autocomplete.updateDataset(setDB);
          hideLoadingSpinner();
          updateSetDataTimestamp(setDB.dataRetrieved);
          BC.Overlay.hide();
        } else {
          // We reached our target server, but it returned an error
          // alert("Could not retrieve set data - connection successful, but data failed");
          if (setDB !== null) {
            // If we've got localStorage data we're in good shape, move along
            updateSetDataTimestamp(setDB.dataRetrieved);
          } else {
            // No local storage data and data retrieval failed.
            BC.Overlay.show("Oh Noes!", "Something went wrong on our end. It's us, not you. We'll get on that right away.");
            // TODO: Notify someone!
          }
          hideLoadingSpinner();
        }
      };

      request.onerror = function() {
        // There was a connection error of some sort
        // alert("Could not retrieve set data - connection error");
        if (setDB !== null) {
          // If we've got localStorage data we're in good shape, move along
          updateSetDataTimestamp(setDB.dataRetrieved);
        } else {
          // No local storage data and data retrieval failed.
          BC.Overlay.show("Oh Noes!", "Something went wrong on our end. It's us, not you. We'll get on that right away.");
          // TODO: Notify someone!
        }
        hideLoadingSpinner();
      };

      request.send();
    } catch (e) {
      // console.log(e);
      if (setDB !== null) {
        // Something went wrong with the data request, but we've got localStorage data, so move along
        updateSetDataTimestamp(setDB.dataRetrieved);
        BC.Overlay.hide();
      }
      hideLoadingSpinner();
    }
  }

  function updateSetDataTimestamp(timestamp) {
    document.querySelector(".bc-lookup-set-data-timestamp").setAttribute("datetime", timestamp);
    timeago().render(document.querySelectorAll('.bc-lookup-set-data-timestamp'));
  }

  const initialize = function initialize() {
    setDB = localStorage.getItem("BCSetDB");
    setDB = JSON.parse(setDB);
    if (setDB === null) {
      // If there's no data to work with, put up the overlay so the form can't be used
      BC.Overlay.show("Sit Tight.", "We're getting the freshest set values just for you!")
    }
    // if (1 === 1) {
    if (setDB === null || typeof setDB.dataRetrieved === 'undefined' || (Date.now() - setDB.dataRetrieved) > oneHour ) { // If it's been more than an hour get fresh data
      retrieveFreshSetData();
    } else {
      updateSetDataTimestamp(setDB.dataRetrieved);
    }
  }

  return {
    initialize: initialize,
    retrieveFreshSetData: retrieveFreshSetData
  };
}();

BC.Values = function() {
  const setTitleFieldId = "bc-results__set-title",
        ebayAvgFieldId = "ebay-avg",
        ebaySellingFeesFieldId = "ebay-selling-fees",
        ebayPurchasePriceFieldId = "ebay-purchase-price",
        ebayProfitFieldId = "ebay-profit",
        showLookupFormClass = "bc-show-lookup-form";

  function calculate(setNumber, purchasePrice) {
    const setData = setDB[setNumber];

    if (setData) {
      BC.SetSummary.update(setData);
      BC.PortletLayout.updateAllPortletValues(setData, purchasePrice);

      showValues();
    } else {
      alert("Set Number Not Found")
    }
  }

  function showValues() {
    document.body.classList.add("bc--show-values");
  }

  function hideValues() {
    document.body.classList.remove("bc--show-values");
  }

  function handleShowLookupFormClick(e) {
    e.preventDefault();
    hideValues();
  }

  function addEventListeners() {
    const showLookupFormTriggers = Array.from(document.querySelectorAll(`.${showLookupFormClass}`));

    showLookupFormTriggers.forEach(function(t){
      t.addEventListener("click", handleShowLookupFormClick);
    });
  }

  function initialize() {
    addEventListeners();
  }

  return {
    calculate: calculate,
    initialize: initialize
  }
}();

function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}

ready(function(){
  BC.Overlay.initialize();
  BC.SetDatabase.initialize();
  BC.Values.initialize();
  BC.SetSummary.initialize();
  BC.PortletLayout.initialize();
  BC.PortletLayout.buildLayout();
  BC.SignUpForm.initialize();
  BC.SiteMenu.initialize();
  BC.UserSettingsPane.initialize();
  BC.SignInForm.initialize();
  BC.SetLookupForm.initialize();
  BC.AdHeader.initialize();
  BC.App.initialize(); // Check auth token, broadcast user state events
});

'use strict';
BC.Autocomplete = function() {
  const autocompleteSelector = ".bc-autocomplete__list",
        autocompleteVisibleClass = "bc-autocomplete--visible",
        autocompleteItemTemplateClass = "bc-autocomplete__item--template",
        itemLinkClass = "bc-autocomplete__item-link",
        itemLinkTextClass = "bc-autocomplete__item-link-text",
        itemMetadataClass = "bc-autocomplete__item-metadata";
  let dataset,
      keys,
      autocomplete,
      itemTemplate,
      triggerInput;

  function showAutocomplete() {
    autocomplete.classList.add(autocompleteVisibleClass);
  }

  function hideAutocomplete() {
    autocomplete.classList.remove(autocompleteVisibleClass);
  }

  function clearAutocompleteResults() {
    autocomplete.innerHTML = '';
  }

  function buildAutocompleteResults(matchedKeys) {
    const results = matchedKeys.map(function(k){
      return dataset[k];
    });

    // console.log(results);

    clearAutocompleteResults();
    console.log(autocomplete);
    results.forEach(function(r) {
      const result = itemTemplate.cloneNode(true),
            setNumber = result.querySelector(`.${itemLinkTextClass}`),
            setTitle = result.querySelector(`.${itemMetadataClass}`);
      setNumber.innerHTML = r.k;
      setNumber.href = `#${r.k}`;
      setTitle.innerHTML = r.t;
      autocomplete.appendChild(result);
    });
  }

  function findMatchesInDataset(value) {
    const search = new RegExp(`^${value}`);
    const matches = keys.filter(function(key) {
      return search.exec(key);
    });

    return matches.sort();
  }

  function triggerAutocomplete() {
    const currentValue = this.value,
          matches = findMatchesInDataset(currentValue);
    if (currentValue.length > 1) {
      if (matches.length > 0) {
        buildAutocompleteResults(matches);
        showAutocomplete();
      } else {
        hideAutocomplete();
      }
    } else {
      hideAutocomplete();
    }
  }

  function autofillInput(text) {
    triggerInput.value = text;
  }

  function handleAutocompleteClick(e) {
    e.preventDefault();
    let link;
    if (e.target.classList.contains(itemLinkClass)) {
      link = e.target;
    } else if (e.target.closest('.' + itemLinkClass) !== null) {
      link = e.target.closest('.' + itemLinkClass);
    }
    const setNumber = link.querySelector('.' + itemLinkTextClass).textContent;
    autofillInput(setNumber);
    hideAutocomplete();
  }

  const updateDataset = function updateDataset(data) {
    dataset = data;
    if (dataset !== null) {
      keys = Object.keys(dataset);
    }
  }


  const initialize = function initialize(targetSelector, data) {
    updateDataset(data);
    triggerInput = document.querySelector(targetSelector);
    console.log(triggerInput);
    autocomplete = triggerInput.parentNode.querySelector(autocompleteSelector);
    autocomplete.addEventListener('click', handleAutocompleteClick);
    triggerInput.addEventListener('keyup', triggerAutocomplete);
    itemTemplate = autocomplete.querySelector(`.${autocompleteItemTemplateClass}`);
    itemTemplate.classList.remove(autocompleteItemTemplateClass);
    itemTemplate.parentNode.removeChild(itemTemplate);
  }

  return {
    initialize: initialize,
    updateDataset: updateDataset
  }
}();

function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}

ready(function(){
  BC.Autocomplete.initialize("#bc-set-lookup-form__set-number-input", setDB);
});

'use strict';
BC.AdHeader = function() {
  const adHeaderSelector = '.bc-ad-header';

  let adHeader;

  function showAds() {
    adHeader.setAttribute("style", "display: block;");
  }

  function hideAds() {
    adHeader.removeAttribute("style");
  }

  function setAdDisplay() {
    const userSettings = BC.Utils.getFromLocalStorage(localStorageKeys.userSettings);
    if (!userSettings || !userSettings.plus_member) {
      showAds();
    } else {
      hideAds();
    }
  }

  function setEventListeners() {
    document.addEventListener(customEvents.userSignedIn, setAdDisplay);
    document.addEventListener(customEvents.userSignedOut, setAdDisplay);
  }

  const initialize = function initialize() {
    adHeader = document.querySelector(adHeaderSelector);
    setAdDisplay();
    setEventListeners();
  }

  return {
    initialize: initialize
  }
}();

'use strict';
BC.Overlay = function() {
  const overlaySelector = '.bc-overlay',
        overlayTitleSelector = '.bc-overlay__title',
        overlayMessageSelector = '.bc-overlay__message',
        overlayVisibleClass = 'bc-overlay--visible';

  let overlay,
      title,
      message;

  function dismissOverlay() {
    hide();
    overlay.removeEventListener("click", dismissOverlay);
  }

  const initialize = function initialize() {
    overlay = document.querySelector(overlaySelector);
    title = document.querySelector(overlayTitleSelector);
    message = document.querySelector(overlayMessageSelector);
  }

  const show = function show(titleText, messageText, dismissible) {
    dismissible = typeof dismissible === 'undefined' ? false : true;
    title.innerHTML = titleText;
    message.innerHTML = messageText;
    overlay.classList.add(overlayVisibleClass);

    if (dismissible) {
      overlay.addEventListener("click", dismissOverlay);
    }
  }

  const hide = function hide() {
    overlay.classList.remove(overlayVisibleClass);
  }

  return {
    initialize: initialize,
    show: show,
    hide: hide
  }
}();

'use strict';
BC.PortletLayout = function() {
  const emptyPortletClass = "bc-portlet--empty",
        defaultLayout = [
          {
            header: "Current Listings (New)",
            portlets: [
              {
                title: "Brick Owl",
                retrievedAtKey: "boRA",
                listingsCountKey: "boCSNLC",
                lineItems: [
                  {
                    key: "boCSNA",
                    label: "Avg Listing"
                  },
                  {
                    key: "boFees",
                    label: "Brick Owl & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              },
              {
                title: "Bricklink",
                retrievedAtKey: "blRA",
                listingsCountKey: "blCSNLC",
                lineItems: [
                  {
                    key: "blCSNA",
                    label: "Avg Listing"
                  },
                  {
                    key: "blFees",
                    label: "Bricklink & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              }
            ]
          },
          {
            header: "Current Listings (Used)",
            portlets: [
              {
                title: "Brick Owl",
                retrievedAtKey: "boRA",
                listingsCountKey: "boCSULC",
                lineItems: [
                  {
                    key: "boCSUA",
                    label: "Avg Listing"
                  },
                  {
                    key: "boFees",
                    label: "Brick Owl & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              },
              {
                title: "Bricklink",
                retrievedAtKey: "blRA",
                listingsCountKey: "blCSULC",
                lineItems: [
                  {
                    key: "blCSUA",
                    label: "Avg Listing"
                  },
                  {
                    key: "blFees",
                    label: "Bricklink & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              }
            ]
          }
        ],
        plusMemberPortlets = [
          {
            header: "Sold Listings (New)",
            portlets: [
              {
                title: "eBay",
                retrievedAtKey: "eRA",
                listingsCountKey: "eCSCLNLC",
                timestampLabel: "In the last 30 days",
                listingsCountSuffix: "sold",
                lineItems: [
                  {
                    key: "eCSCLNM",
                    label: "Median Value"
                  },
                  {
                    key: "eFees",
                    label: "eBay & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              },
              {
                title: "Bricklink",
                retrievedAtKey: "blRA",
                listingsCountKey: "blCSCLNLC",
                timestampLabel: "In the last 6 months",
                listingsCountSuffix: "sold",
                lineItems: [
                  {
                    key: "blCSCLNM",
                    label: "Median Value"
                  },
                  {
                    key: "blFees",
                    label: "Bricklink & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              }
            ]
          },
          {
            header: "Sold Listings (Used)",
            portlets: [
              {
                title: "eBay",
                retrievedAtKey: "eRA",
                listingsCountKey: "eCSCLULC",
                timestampLabel: "In the last 30 days",
                listingsCountSuffix: "sold",
                lineItems: [
                  {
                    key: "eCSCLUM",
                    label: "Median Value"
                  },
                  {
                    key: "eFees",
                    label: "eBay & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              },
              {
                title: "Bricklink",
                retrievedAtKey: "blRA",
                listingsCountKey: "blCSCLULC",
                timestampLabel: "In the last 6 months",
                listingsCountSuffix: "sold",
                lineItems: [
                  {
                    key: "blCSCLUM",
                    label: "Median Value"
                  },
                  {
                    key: "blFees",
                    label: "Bricklink & PayPal Fees"
                  },
                  {
                    key: "setCost",
                    label: "Cost<span class='bc-portlet__line-item-label-plus-member-snippet'> w/taxes</span>"
                  }
                ]
              }
            ]
          }
        ];

  let portletTemplate,
      portletLineItemTemplate,
      headerTemplate,
      gridTemplate,
      portletWrapper;

  function getLayout() {
    const userSettings = BC.Utils.getFromLocalStorage(localStorageKeys.userSettings);
    let layout = defaultLayout.slice(); // Using .slice() to clone so it's not referenced

    if (userSettings !== null && userSettings.plus_member) {
      layout = defaultLayout.slice().concat(plusMemberPortlets.slice()); 
    }

    return layout;
  }

  function getSectionHeader(text) {
    let headerNode = headerTemplate.cloneNode(true),
        headerNodeText = headerNode.querySelector(".bc-portlet-section-header__text");
    headerNodeText.innerHTML = text;
    return headerNode;
  }

  function getPortletLineItem(lineItem) {
    let pliNode = portletLineItemTemplate.cloneNode(true),
        input = pliNode.querySelector(".bc-portlet__line-item-input"),
        label = pliNode.querySelector(".bc-portlet__line-item-label");
    label.innerHTML = lineItem.label;
    input.setAttribute("data-value-key", lineItem.key);
    return pliNode;
  }

  function getPortlet(portlet) {
    let portletNode = portletTemplate.cloneNode(true),
        portletNodeTitle = portletNode.querySelector(".bc-portlet__title"),
        portletTimestamp = portletNode.querySelector(".bc-portlet__data-timestamp"),
        portletRetrievedAt = portletNode.querySelector(".bc-portlet__data-retrieved-at"),
        portletListingsCount = portletNode.querySelector(".bc-portlet__listings-count"),
        portletListingsCountAmount = portletListingsCount.querySelector(".bc-portlet__listings-count-amount"),
        portletListingsCountSuffix = portletListingsCount.querySelector(".bc-portlet__listings-count-suffix"),
        portletLineItems = portletNode.querySelector(".bc-portlet__line-items");
    
    // Portlet Title
    portletNodeTitle.innerHTML = portlet.title;

    // Override retrieved at timestamp label with a string
    if (portlet.timestampLabel) {
      portletTimestamp.textContent = portlet.timestampLabel;
    } else {
      // Set retrieved at time
      portletRetrievedAt.setAttribute("data-retrieved-at-key", portlet.retrievedAtKey);
    }

    // Listings Count Amount
    if (portlet.listingsCountKey) {
      portletListingsCountAmount.setAttribute("data-listings-count-key", portlet.listingsCountKey);
    } else {
      // If the portlet doesn't have a listingsCountKey, don't show the portletListingsCountSection
      portletListingsCount.parentNode.removeChild(portletListingsCount);
    }

    // Listings Count Suffix
    if (portlet.listingsCountSuffix) {
      portletListingsCountSuffix.textContent = portlet.listingsCountSuffix;
    }


    if (portlet.lineItems) {
      portlet.lineItems.forEach(function(li){
        portletLineItems.append(getPortletLineItem(li));
      });
    }
    return portletNode;
  }

  function getPortletGrid(portlets) {
    let gridNode = gridTemplate.cloneNode(true);
    portlets.forEach(function(portlet){
      gridNode.append(getPortlet(portlet));
    });
    return gridNode;
  }

  function getMarketplaceFees(salePrice, feesKey) {
    switch(feesKey) {
      case 'blFees':
        return BC.Utils.getBricklinkSellerFees(salePrice);
        break;
      case 'boFees':
        return BC.Utils.getBrickOwlSellerFees(salePrice);
        break;
      case 'eFees':
        return BC.Utils.getEbaySellerFees(salePrice);
        break;
      default:
        console.log("No fee calculator for " + feesKey);
    }
  }

  function updatePortletValues(p, data, setCost) {
    const lineItemInputs = Array.from(p.querySelectorAll(".bc-portlet__line-item-input")),
          profitInput = p.querySelector(".bc-portlet__profit-input"),
          portletRetrievedAt = p.querySelector(".bc-portlet__data-retrieved-at"),
          retrievedAtKey = portletRetrievedAt === null ? false : portletRetrievedAt.getAttribute("data-retrieved-at-key"),
          portletListingsCountAmount = p.querySelector(".bc-portlet__listings-count-amount"),
          listingsCountKey = portletListingsCountAmount === null ? false : portletListingsCountAmount.getAttribute("data-listings-count-key"),
          liKeys = lineItemInputs.map(function(li){ return li.getAttribute("data-value-key"); }),
          marketplaceValueKey = liKeys.find(function(k){ return data.hasOwnProperty(k); }),
          marketplaceValue = marketplaceValueKey ? data[marketplaceValueKey] : false,
          marketplaceFeesKey = liKeys.find(function(k){ return k.toLowerCase().includes("fees"); }),
          marketplaceFees = marketplaceFeesKey && marketplaceValue ? getMarketplaceFees(marketplaceValue, marketplaceFeesKey) : false;

    if (retrievedAtKey && data.hasOwnProperty(retrievedAtKey)) {
      portletRetrievedAt.setAttribute("datetime", data[retrievedAtKey]);
      timeago().render(portletRetrievedAt);
    }

    if (listingsCountKey && data.hasOwnProperty(listingsCountKey)) {
      portletListingsCountAmount.innerHTML = data[listingsCountKey];
    }

    let profit = Math.abs(setCost) * -1, 
        portletValues = {
          setCost: setCost
        };

    if (marketplaceValue) {
      p.classList.remove(emptyPortletClass);
      portletValues[marketplaceValueKey] = marketplaceValue;
      profit += marketplaceValue;
      
      if (marketplaceFees) {
        portletValues[marketplaceFeesKey] = marketplaceFees;
        profit -= marketplaceFees;
      } else {
        console.log("Could not calculate marketplace fees", liKeys);
      }

      lineItemInputs.forEach(function(i){
        const key = i.getAttribute("data-value-key");
        i.value = BC.Utils.formatCurrency(portletValues[key]);
      });

      profitInput.value = BC.Utils.formatCurrency(profit);
    } else {
      p.classList.add(emptyPortletClass);
      console.log("Marketplace Value not found", liKeys);
    }
  }

  function getSetCostWithTaxes(setCost) {
    const userSettings = BC.Utils.getFromLocalStorage(localStorageKeys.userSettings);
    setCost = parseFloat(setCost, 10);
    if (userSettings !== null && userSettings.plus_member && userSettings.taxRate) {
      const taxes = parseFloat(userSettings.taxRate / 100, 10) * setCost;
      setCost += taxes;
    }
    return setCost;
  }

  function setEventListeners() {
    document.addEventListener(customEvents.userSignedIn, buildLayout);
    document.addEventListener(customEvents.userSignedOut, buildLayout);
  }

  const updateAllPortletValues = function updateAllPortletValues(data, setCost) {
    const portlets = document.querySelectorAll(".bc-portlet"),
          cost = getSetCostWithTaxes(setCost);

    portlets.forEach(function(p){
      updatePortletValues(p, data, cost);
    })
  }

  const buildLayout = function buildLayout() {
    const layout = getLayout();
    portletWrapper.innerHTML = ''; // Clear the portlet wrapper
    layout.forEach(function(portletSection){
      portletWrapper.append(getSectionHeader(portletSection.header));
      portletWrapper.append(getPortletGrid(portletSection.portlets));
    });
  }

  const initialize = function initialize() {
    portletTemplate = document.getElementById('bc-portlet-template');
    portletLineItemTemplate = portletTemplate.querySelector('.bc-portlet__line-item');
    headerTemplate = document.getElementById('bc-portlet-section-header-template');
    gridTemplate = document.getElementById('bc-portlet-grid-template');
    portletWrapper = document.querySelector('.bc-portlet-section-wrapper');
    portletLineItemTemplate.parentNode.removeChild(portletLineItemTemplate);
    portletTemplate.parentNode.removeChild(portletTemplate);
    headerTemplate.parentNode.removeChild(headerTemplate);
    gridTemplate.parentNode.removeChild(gridTemplate);
    portletTemplate.removeAttribute("id");
    headerTemplate.removeAttribute("id");
    gridTemplate.removeAttribute("id");
    setEventListeners();
  }

  return {
    initialize: initialize,
    buildLayout: buildLayout,
    updateAllPortletValues: updateAllPortletValues
  }
}();

'use strict';
BC.PortletPartOutBrickOwl = function() {
  const boPoNewInputId = 'bo-po-new',
        boPoUsedInputId = 'bo-po-used',
        boPoNewProfitInputId = 'bo-po-profit-new',
        boPoUsedProfitInputId = 'bo-po-profit-used',
        boPoCostNewInputId = 'bo-po-cost-new',
        boPoCostUsedInputId = 'bo-po-cost-used';

  let boPoNew,
      boPoUsed,
      boPoNewProfit,
      boPoUsedProfit,
      boPoCostNew,
      boPoCostUsed;

  const update = function update(setData, purchasePrice) {
    boPoNew = document.getElementById(boPoNewInputId);
    boPoUsed = document.getElementById(boPoUsedInputId);
    boPoNewProfit = document.getElementById(boPoNewProfitInputId);
    boPoUsedProfit = document.getElementById(boPoUsedProfitInputId);
    boPoCostNew = document.getElementById(boPoCostNewInputId);
    boPoCostUsed = document.getElementById(boPoCostUsedInputId);

    if (setData.boPON) {
      const newValue = setData.boPON,
            usedValue = setData.boPOU;

      if (newValue !== null) {
        boPoNew.value = BC.Utils.formatCurrency(newValue);
        boPoCostNew.value = BC.Utils.formatCurrency(purchasePrice);
        boPoNewProfit.value = BC.Utils.formatCurrency(newValue - purchasePrice);
      }

      if (usedValue !== null) {
        boPoUsed.value = BC.Utils.formatCurrency(usedValue);
        boPoCostUsed.value = BC.Utils.formatCurrency(purchasePrice);
        boPoUsedProfit.value = BC.Utils.formatCurrency(usedValue - purchasePrice);
      }
    }
  }

  return {
    update: update
  }
}();

// 'use strict';
// BC.PortletPricePerPiece = function() {
//   const msrpPPPInputId = 'ppp-msrp',
//         userPPPInputId = 'ppp-your-price';

//   let msrpPPP,
//       userPPP;

//   const update = function update(setData, purchasePrice) {
//     msrpPPP = document.getElementById(msrpPPPInputId);
//     userPPP = document.getElementById(userPPPInputId);
//     const partCount = setData.pcs;
//     console.log(setData);

//     if (partCount !== null) {
//       if (setData.msrp !== null) {
//         msrpPPP.value = BC.Utils.formatCurrency(setData.msrp / partCount) + " per piece";
//       }

//       userPPP.value = BC.Utils.formatCurrency(purchasePrice / partCount) + " per piece";
//     }
//   }

//   return {
//     update: update
//   }
// }();

'use strict';
BC.SetLookupForm = function() {
  const formId = 'bc-set-lookup-form',
        setNumberFieldId = "bc-set-lookup-form__set-number-input",
        purchasePriceFieldId = "bc-set-lookup-form__purchase-price-input",
        taxRateSelector = ".bc-set-lookup-form__tax-message",
        taxRateAmountSelector = ".bc-set-lookup-form__tax-amount",
        taxRateVisibleClass = "bc-set-lookup-form__tax-message--visible";

  let form,
      setNumber,
      purchasePrice,
      taxRateAmount,
      taxRate;

  function handleFormSubmit(e) {
    e.preventDefault();
    BC.Values.calculate(setNumber.value, purchasePrice.value);
  }

  function setTaxRateDisplay(userSettings) {
    if (userSettings !== null && userSettings.plus_member && userSettings.taxRate) {
      taxRateAmount.innerHTML = userSettings.taxRate;
      taxRate.classList.add(taxRateVisibleClass);
    } else {
      taxRateAmount.innerHTML = '';
      taxRate.classList.remove(taxRateVisibleClass);
    }
  }

  function updateFormDisplayForSignedInUser() {
    const userSettings = BC.Utils.getFromLocalStorage(localStorageKeys.userSettings);
    setTaxRateDisplay(userSettings);
  }

  function setEventListeners() {
    form.addEventListener("submit", handleFormSubmit);
    document.addEventListener(customEvents.userSignedIn, updateFormDisplayForSignedInUser);
    document.addEventListener(customEvents.userSignedOut, updateFormDisplayForSignedInUser);
  }

  const initialize = function initialize() {
    form = document.getElementById(formId);
    setNumber = document.getElementById(setNumberFieldId);
    purchasePrice = document.getElementById(purchasePriceFieldId);
    taxRate = form.querySelector(taxRateSelector);
    taxRateAmount = form.querySelector(taxRateAmountSelector);
    setEventListeners();
  }

  return {
    initialize: initialize
  }
}();

'use strict';
BC.SetSummary = function() {
  const numberSelector = '.bc-set-summary__number',
        yearSelector = '.bc-set-summary__year',
        titleSelector = '.bc-set-summary__title',
        pcsSelector = '.bc-set-summary__pcs-count',
        msrpSelector = '.bc-set-summary__msrp-value';

  let number,
      year,
      title,
      pcs,
      msrp;

  const initialize = function initialize() {
    number = document.querySelector(numberSelector);
    year = document.querySelector(yearSelector);
    title = document.querySelector(titleSelector);
    pcs = document.querySelector(pcsSelector);
    msrp = document.querySelector(msrpSelector);
  }

  const update = function update(setData) {
    const setNumber = typeof setData.nv === 'undefined' ? setData.n : setData.n + '-' + setData.nv;
    number.innerHTML = setNumber;
    year.innerHTML = setData.y;
    title.innerHTML = setData.t;
    pcs.innerHTML = setData.pcs;
    msrp.innerHTML = parseFloat(setData.msrp, 10) > 0 ? "$" + setData.msrp : "Unknown";
  }

  return {
    initialize: initialize,
    update: update
  }
}();

'use strict';
BC.SignUpForm = function() {
  const signUpFormId = 'bc-sign-up-form',
        emailFieldId = 'bc-sign-up-form-email',
        passwordFieldId = 'bc-sign-up-form-password',
        submitButtonSelector = '.bc-sign-up-form__submit-button',
        signUpEndpoint = '/signup',
        formPaneSelector = '.bc-sign-up-form-pane',
        formVisibleClass = 'bc-sign-up-form-pane--visible',
        hidePaneTriggerSelector = '.bc-sign-up-form-pane-hide-trigger';

  let form,
      formPane,
      emailField,
      passwordField,
      submitButton,
      hidePaneTriggers;

  function disableForm() {
    emailField.setAttribute('disabled', true);
    passwordField.setAttribute('disabled', true);
    submitButton.setAttribute('disabled', true);
  }

  function enableForm() {
    emailField.removeAttribute('disabled');
    passwordField.removeAttribute('disabled');
    submitButton.removeAttribute('disabled');
  }

  function resetForm() {
    form.reset();
  }

  function saveAuthToken(authToken) {
    localStorage.setItem(localStorageKeys.authToken, authToken)
  }

  function handleFormSignup(e) {
    e.preventDefault();
    disableForm();
    var request = new XMLHttpRequest();
    const apiDomain = apiMapping[currentDomain],
          params = "email=" + emailField.value + "&password=" + passwordField.value + "&password_confirmation=" + passwordField.value;
    request.open('POST', apiDomain + signUpEndpoint, true);
    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    //Send the proper header information along with the request for the POST to work
    request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

    request.onload = function() {
      if (request.status >= 200 && request.status < 400) {
        // Success!
        var data = JSON.parse(request.responseText);
        saveAuthToken(data.auth_token);
        BC.Overlay.show("Welcome!", "User account created successfully.", true);
        enableForm();
        resetForm();
      } else if (request.status === 422) {

        var data = JSON.parse(request.responseText);
        if (data.message && data.message.toLowerCase().includes('already exists')) {
          BC.Overlay.show("Sorry! Can't create that account.", data.message, true);
        } else if (data.message && data.message.toLowerCase().includes("password can't be blank")) {
          BC.Overlay.show("Forget something?", "Please enter a password", true);
        }
        // We reached our target server, but it returned an error
        enableForm();
      } else {
        alert("Sign up failed - connection successful, but data failed");
        enableForm();
      }
    };

    request.onerror = function() {
      // There was a connection error of some sort
      alert("Could not sign up - connection error");
      enableForm();
    };

    request.send(params); // POST params are sent down here
    return false; // prevent form submission
  }

  function setEventListeners() {
    form.addEventListener("submit", handleFormSignup);
    hidePaneTriggers.forEach(function(t) {
      t.addEventListener("click", hideFormPane);
    });
  }

  const showFormPane = function showFormPane() {
    formPane.classList.add(formVisibleClass);
  }

  const hideFormPane = function hideFormPane() {
    formPane.classList.remove(formVisibleClass);
  }

  const initialize = function initialize() {
    form = document.getElementById(signUpFormId);
    formPane = document.querySelector(formPaneSelector);
    hidePaneTriggers = Array.from(document.querySelectorAll(hidePaneTriggerSelector));
    emailField = document.getElementById(emailFieldId);
    passwordField = document.getElementById(passwordFieldId);
    submitButton = document.querySelector(submitButtonSelector);
    setEventListeners();
  }

  return {
    initialize: initialize,
    showFormPane: showFormPane,
    hideFormPane: hideFormPane
  }
}();

'use strict';
BC.SignInForm = function() {
  const signInFormId = 'bc-sign-in-form',
        emailFieldId = 'bc-sign-in-form-email',
        passwordFieldId = 'bc-sign-in-form-password',
        submitButtonSelector = '.bc-sign-in-form__submit-button',
        signInEndpoint = '/auth/signin',
        signInFormHiddenClass = 'bc-sign-in-form--hidden',
        signUpLinkSelector = '.bc-show-sign-up-form';

  let form,
      emailField,
      passwordField,
      submitButton,
      signUpLink;

  function disableForm() {
    emailField.setAttribute('disabled', true);
    passwordField.setAttribute('disabled', true);
    submitButton.setAttribute('disabled', true);
  }

  function enableForm() {
    emailField.removeAttribute('disabled');
    passwordField.removeAttribute('disabled');
    submitButton.removeAttribute('disabled');
  }

  function resetForm() {
    form.reset();
  }

  function handleFormSignIn(e) {
    e.preventDefault();
    disableForm();
    var request = new XMLHttpRequest();
    const apiDomain = apiMapping[currentDomain],
          params = "email=" + emailField.value + "&password=" + passwordField.value,
          endpointUrl = apiDomain + signInEndpoint;
    request.open('POST', endpointUrl, true);
    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    //Send the proper header information along with the request for the POST to work
    request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

    request.onload = function() {
      console.log(request);
      if (request.status >= 200 && request.status < 400) {
        // Success!
        var data = JSON.parse(request.responseText);
        BC.Utils.saveToLocalStorage(localStorageKeys.authToken, data.auth_token);
        BC.Utils.saveToLocalStorage(localStorageKeys.userSettings, data.preferences);
        // TODO: Broadcast event that user settings have been loaded
        BC.Overlay.show("Welcome back!", "Sign in successful.", true);
        BC.App.setSignedInState();
        enableForm();
        resetForm();
      } else {
        var data = JSON.parse(request.responseText);
        BC.Overlay.show("Sign In Failed", data.message, true);
        enableForm();
      }
    };

    request.onerror = function() {
      // There was a connection error of some sort
      BC.Overlay.show("Sign In Failed", "Something happened and we couldn't connect to sign you in. Sit tight, we'll fix it.", true);
      enableForm();
    };

    request.send(params); // POST params are sent down here
    return false; // prevent form submission
  }

  function hideSignInForm() {
    form.classList.add(signInFormHiddenClass);
  }

  function showSignInForm() {
    form.classList.remove(signInFormHiddenClass);
  }

  function setEventListeners() {
    form.addEventListener("submit", handleFormSignIn);
    signUpLink.addEventListener("click", BC.SignUpForm.showFormPane);
    document.addEventListener(customEvents.userSignedIn, hideSignInForm);
    document.addEventListener(customEvents.userSignedOut, showSignInForm);
  }

  const initialize = function initialize() {
    form = document.getElementById(signInFormId);
    emailField = document.getElementById(emailFieldId);
    passwordField = document.getElementById(passwordFieldId);
    submitButton = document.querySelector(submitButtonSelector);
    signUpLink = document.querySelector(signUpLinkSelector);
    setEventListeners();
  }

  return {
    initialize: initialize
  }
}();

'use strict';
BC.SiteMenu = function() {
  const showMenuSelector = '.bc-site-menu-show-trigger',
        hideMenuSelector = '.bc-site-menu-hide-trigger',
        menuSelector = '.bc-site-menu',
        menuVisibleClass = 'bc-site-menu--visible',
        signOutSelector = '[href="#sign-out"]',
        settingsSelector = '[href="#user-settings"]';

  let showMenuTriggers,
      hideMenuTriggers,
      signOutLink,
      settingsLink,
      menu;

  const showMenu = function showMenu() {
    menu.classList.add(menuVisibleClass);
  }

  const hideMenu = function showMenu() {
    menu.classList.remove(menuVisibleClass);
  }

  function setEventListeners() {
    showMenuTriggers.forEach(function(t){
      t.addEventListener("click", showMenu);
    });

    hideMenuTriggers.forEach(function(t){
      t.addEventListener("click", hideMenu);
    });

    signOutLink.addEventListener("click", BC.App.signOut);
    settingsLink.addEventListener("click", BC.UserSettingsPane.showPane);
  }


  const initialize = function initialize() {
    showMenuTriggers = Array.from(document.querySelectorAll(showMenuSelector));
    hideMenuTriggers = Array.from(document.querySelectorAll(hideMenuSelector));
    menu = document.querySelector(menuSelector);
    signOutLink = document.querySelector(signOutSelector);
    settingsLink = document.querySelector(settingsSelector);
    setEventListeners();
  }

  return {
    initialize: initialize,
    showMenu: showMenu,
    hideMenu: hideMenu,
  }
}();

'use strict';
BC.UserSettingsPane = function() {
  const settingsPaneSelector = '.bc-user-settings-pane',
        userTaxRateFieldId = 'bc-user-settings-taxRate',
        paneVisibleClass = 'bc-user-settings-pane--visible',
        hidePaneSelector = '.bc-user-settings-pane-hide-trigger';

  let taxRate,
      settingsPane,
      hidePaneTriggers;

  function disableTaxesSetting() {
    taxRate.value = '';
    taxRate.setAttribute('disabled', true);
  }

  function enableTaxesSetting(userSettings) {
    taxRate.removeAttribute('disabled');
    if (userSettings.taxRate) {
      taxRate.value = userSettings.taxRate; // If they've previously saved a tax rate, restore that value here
    }
  }

  function updateTaxesSetting(userSettings) {
    disableTaxesSetting();
    if (userSettings !== null && userSettings.plus_member) {
      enableTaxesSetting(userSettings); // If they're a plus member, give them access to the tax rate settings
    }
  }

  function setEventListeners() {
    document.addEventListener(customEvents.userSignedIn, update);
    document.addEventListener(customEvents.userSignedOut, update);
    hidePaneTriggers.forEach(function(t){
      t.addEventListener("click", hidePane);
    });
  }

  const showPane = function showPane() {
    settingsPane.classList.add(paneVisibleClass);
  }

  const hidePane = function hidePane() {
    settingsPane.classList.remove(paneVisibleClass);
  }

  const update = function update() {
    const userSettings = BC.Utils.getFromLocalStorage(localStorageKeys.userSettings);
    updateTaxesSetting(userSettings);
  }

  const initialize = function initialize() {
    taxRate = document.getElementById(userTaxRateFieldId);
    settingsPane = document.querySelector(settingsPaneSelector);
    hidePaneTriggers = Array.from(document.querySelectorAll(hidePaneSelector));
    update();
    setEventListeners();
  }

  return {
    initialize: initialize,
    update: update,
    showPane: showPane,
    hidePane: hidePane
  }
}();
