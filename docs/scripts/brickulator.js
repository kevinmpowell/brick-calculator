// DO NOT EDIT: This file is automatically generated by the project's build task
'use strict';
var BC = BC || {};
let setDB;

const ebaySellingFeePercentage = .13, // TODO: Get this from a lookup
      oneMinute = 60000, // in milliseconds
      threeMinutes = oneMinute * 3, // in milliseconds
      oneHour = oneMinute * 60; // in milliseconds

BC.Utils = function() {
  const formatCurrency = function formatCurrency(number) {
    return number.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
  }

  const getBrickOwlSellerFees = function getBrickOwlSellerFees(finalValue) {
    const brickOwlCommissionPercent = 2.5,
          fee = (brickOwlCommissionPercent / 100) * finalValue;
    console.log(fee);
    return fee;
  }

  return {
    formatCurrency: formatCurrency,
    getBrickOwlSellerFees: getBrickOwlSellerFees
  }
}();

BC.SetDatabase = function() {
  const loadingSpinner = document.querySelector(".bc-spinner--loading-set-data"),
        loadingSpinnerVisibleClass = "bc-spinner--visible",
        setDataCachedMessage = document.querySelector(".bc-lookup-set-data-status-message"),
        setDataCachedMessageHiddenClass = "bc-lookup-set-data-status-message--hidden",
        currentDomain = window.location.hostname,
        apiMapping = {
          'localhost': 'http://localhost:5000',
          'kevinmpowell.github.io': 'https://brickulator-api.herokuapp.com'
        };
  function saveSetDBToLocalStorage(rawJSON) {
    localStorage.clear();
    localStorage.setItem("BCSetDB", rawJSON);
  }

  function showLoadingSpinner() {
    loadingSpinner.classList.add(loadingSpinnerVisibleClass);
    setDataCachedMessage.classList.add(setDataCachedMessageHiddenClass);
  }

  function hideLoadingSpinner() {
    loadingSpinner.classList.remove(loadingSpinnerVisibleClass);
    setDataCachedMessage.classList.remove(setDataCachedMessageHiddenClass);
  }

  const retrieveFreshSetData = function retrieveFreshSetData() {
    var request = new XMLHttpRequest();
    const apiDomain = apiMapping[currentDomain];

    showLoadingSpinner();
    try {
      request.open('GET', apiDomain + '/lego_sets', true);
      request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

      request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
          // Success!
          var data = JSON.parse(request.responseText);
          data.dataRetrieved = Date.now();
          saveSetDBToLocalStorage(JSON.stringify(data));
          setDB = data;
          BC.Autocomplete.updateDataset(setDB);
          hideLoadingSpinner();
          updateSetDataTimestamp(setDB.dataRetrieved);
        } else {
          // We reached our target server, but it returned an error
          alert("Could not retrieve set data - connection successful, but data failed");
          if (setDB !== null) {
            updateSetDataTimestamp(setDB.dataRetrieved);
          }
          hideLoadingSpinner();
        }
      };

      request.onerror = function() {
        // There was a connection error of some sort
        alert("Could not retrieve set data - connection error");
        if (setDB !== null) {
          updateSetDataTimestamp(setDB.dataRetrieved);
        }
        hideLoadingSpinner();
      };

      request.send();
    } catch (e) {
      // console.log(e);
      if (setDB !== null) {
        updateSetDataTimestamp(setDB.dataRetrieved);
      }
      hideLoadingSpinner();
    }
  }

  function updateSetDataTimestamp(timestamp) {
    document.querySelector(".bc-lookup-set-data-timestamp").setAttribute("datetime", timestamp);
    timeago().render(document.querySelectorAll('.bc-lookup-set-data-timestamp'));
  }

  const initialize = function initialize() {
    setDB = localStorage.getItem("BCSetDB");
    setDB = JSON.parse(setDB);
    // if (1 === 1) {
    if (setDB === null || (Date.now() - setDB.dataRetrieved) > threeMinutes ) { // If it's been more than a minute get fresh data
      retrieveFreshSetData();
    } else {
      console.log(setDB.dataRetrieved);
      updateSetDataTimestamp(setDB.dataRetrieved);
    }
  }

  return {
    initialize: initialize,
    retrieveFreshSetData: retrieveFreshSetData
  };
}();

BC.Values = function() {
  const setTitleFieldId = "bc-results__set-title",
        ebayAvgFieldId = "ebay-avg",
        ebaySellingFeesFieldId = "ebay-selling-fees",
        ebayPurchasePriceFieldId = "ebay-purchase-price",
        ebayProfitFieldId = "ebay-profit",
        showLookupFormClass = "bc-show-lookup-form";

  function calculate(setNumber, purchasePrice) {
    const setData = setDB[setNumber];
    // BC.PortletPricePerPiece.update(setData, purchasePrice);
    // BC.PortletPartOutBrickOwl.update(setData, purchasePrice);

    if (setData) {
      BC.SetSummary.update(setData);
      BC.PortletLayout.updateAllPortletValues(setData, purchasePrice);

      showValues();
    } else {
      alert("Set Number Not Found")
    }
  }

  function showValues() {
    document.body.classList.add("bc--show-values");
  }

  function hideValues() {
    document.body.classList.remove("bc--show-values");
  }

  function handleShowLookupFormClick(e) {
    e.preventDefault();
    hideValues();
  }

  function addEventListeners() {
    const showLookupFormTriggers = Array.from(document.querySelectorAll(`.${showLookupFormClass}`));

    showLookupFormTriggers.forEach(function(t){
      t.addEventListener("click", handleShowLookupFormClick);
    });
  }

  function initialize() {
    addEventListeners();
  }

  return {
    calculate: calculate,
    initialize: initialize
  }
}();

BC.Form = function() {
  const formId = "bc-value-lookup-form",
        setNumberFieldId = "bc-value-lookup-form__set-number-input",
        purchasePriceFieldId = "bc-value-lookup-form__purchase-price-input";

  function handleFormSubmit(e) {
    e.preventDefault();
    const setNumber = document.getElementById(setNumberFieldId).value,
          purchasePrice = document.getElementById(purchasePriceFieldId).value;
    BC.Values.calculate(setNumber, purchasePrice);
  }

  function setEventListeners() {
    const form = document.getElementById(formId);
    form.addEventListener("submit", handleFormSubmit);
  }


  let initialize = function initialize() {
    setEventListeners();
  };

  return {
    initialize: initialize
  }
}();



function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}

ready(function(){
  BC.SetDatabase.initialize();
  BC.Form.initialize();
  BC.Values.initialize();
  BC.SetSummary.initialize();
  BC.PortletLayout.initialize();
  BC.PortletLayout.buildLayout();
});

'use strict';
BC.Autocomplete = function() {
  const autocompleteSelector = ".bc-autocomplete",
        autocompleteVisibleClass = "bc-autocomplete--visible",
        autocompleteItemTemplateClass = "bc-autocomplete__item--template",
        itemLinkClass = "bc-autocomplete__item-link",
        itemLinkTextClass = "bc-autocomplete__item-link-text",
        itemMetadataClass = "bc-autocomplete__item-metadata";
  let dataset,
      keys,
      autocomplete,
      itemTemplate,
      triggerInput;

  function showAutocomplete() {
    autocomplete.classList.add(autocompleteVisibleClass);
  }

  function hideAutocomplete() {
    autocomplete.classList.remove(autocompleteVisibleClass);
  }

  function clearAutocompleteResults() {
    autocomplete.innerHTML = '';
  }

  function buildAutocompleteResults(matchedKeys) {
    const results = matchedKeys.map(function(k){
      return dataset[k];
    });

    // console.log(results);

    clearAutocompleteResults();
    results.forEach(function(r) {
      const result = itemTemplate.cloneNode(true),
            setNumber = result.querySelector(`.${itemLinkTextClass}`),
            setTitle = result.querySelector(`.${itemMetadataClass}`);
      setNumber.innerHTML = r.k;
      setNumber.href = `#${r.k}`;
      setTitle.innerHTML = r.t;
      autocomplete.appendChild(result);
    });
  }

  function findMatchesInDataset(value) {
    const search = new RegExp(`^${value}`);
    const matches = keys.filter(function(key) {
      return search.exec(key);
    });

    return matches.sort();
  }

  function triggerAutocomplete() {
    const currentValue = this.value,
          matches = findMatchesInDataset(currentValue);

    if (currentValue.length > 1) {
      if (matches.length > 0) {
        buildAutocompleteResults(matches);
        showAutocomplete();
      } else {
        hideAutocomplete();
      }
    } else {
      hideAutocomplete();
    }
  }

  function autofillInput(text) {
    triggerInput.value = text;
  }

  function handleAutocompleteClick(e) {
    e.preventDefault();
    let link;
    if (e.target.classList.contains(itemLinkClass)) {
      link = e.target;
    } else if (e.target.closest('.' + itemLinkClass) !== null) {
      link = e.target.closest('.' + itemLinkClass);
    }
    const setNumber = link.querySelector('.' + itemLinkTextClass).textContent;
    autofillInput(setNumber);
    hideAutocomplete();
  }

  const updateDataset = function updateDataset(data) {
    dataset = data;
    if (dataset !== null) {
      keys = Object.keys(dataset);
    }
  }


  const initialize = function initialize(targetSelector, data) {
    triggerInput = document.querySelector(targetSelector);
    updateDataset(data);
    triggerInput.addEventListener('keyup', triggerAutocomplete);
    autocomplete = triggerInput.parentNode.querySelector(autocompleteSelector);
    autocomplete.addEventListener('click', handleAutocompleteClick);
    itemTemplate = autocomplete.querySelector(`.${autocompleteItemTemplateClass}`);
    itemTemplate.classList.remove(autocompleteItemTemplateClass);
    itemTemplate.parentNode.removeChild(itemTemplate);
  }

  return {
    initialize: initialize,
    updateDataset: updateDataset
  }
}();

function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}

ready(function(){
  BC.Autocomplete.initialize("#bc-value-lookup-form__set-number-input", setDB);
});

// boCSNA: 28.52

// boCSNH: 36.25

// boCSNL: 24.65

// boCSNLC: 3

// boCSNM: 24.65

// boCSUA: 21.05

// boCSUH: 21.05

// boCSUL: 21.05

// boCSULC: 1

// boCSUM: 21.05

// boMA: 7.09

// boMH: 30.51

// boML: 3.47

// boMM: 5.91

// boPON: 41.18

// boPOU: 29.64

// boRA: "2018-01-06T22:24:52.312Z"

// k: "70130-1"

// msrp: 24.99

// n: "70130"

// nv: "1"

// pcs: 292

// t: "Sparratus' Spider Stalker"

// y: 2014


'use strict';
BC.PortletLayout = function() {
  const defaultLayout = [
    {
      header: "Complete Set Values",
      portlets: [
        {
          title: "Brick Owl (Used)",
          retrievedAtKey: "boRA",
          lineItems: [
            {
              key: "boCSUA",
              label: "Avg Listing"
            },
            {
              key: "boFees",
              label: "Seller Fees"
            },
            {
              key: "setCost",
              label: "Cost"
            }
          ]
        },
        {
          title: "Brick Owl (New)",
          retrievedAtKey: "boRA",
          lineItems: [
            {
              key: "boCSNA",
              label: "Avg Listing"
            },
            {
              key: "boFees",
              label: "Seller Fees"
            },
            {
              key: "setCost",
              label: "Cost"
            }
          ]
        }
      ]
    },
    {
      header: "Part Out Values",
      portlets: [
      {
        title: "Brick Owl (Used)",
        retrievedAtKey: "boRA",
        lineItems: [
          {
            key: "boPOU",
            label: "Avg Value"
          },
          {
            key: "boFees",
            label: "Seller Fees"
          },
          {
            key: "setCost",
            label: "Cost"
          }
        ]
      },
      {
        title: "Brick Owl (New)",
        retrievedAtKey: "boRA",
        lineItems: [
          {
            key: "boPON",
            label: "Avg Listing"
          },
          {
            key: "boFees",
            label: "Seller Fees"
          },
          {
            key: "setCost",
            label: "Cost"
          }
        ]
      }
      ]
    }
  ];

  let portletTemplate,
      portletLineItemTemplate,
      headerTemplate,
      gridTemplate,
      portletWrapper;

  function getLayout() {
    return defaultLayout;
  }

  function getSectionHeader(text) {
    let headerNode = headerTemplate.cloneNode(true),
        headerNodeText = headerNode.querySelector(".bc-portlet-section-header__text");
    headerNodeText.innerHTML = text;
    return headerNode;
  }

  function getPortletLineItem(lineItem) {
    console.log(lineItem);
    let pliNode = portletLineItemTemplate.cloneNode(true),
        input = pliNode.querySelector(".bc-portlet__line-item-input"),
        label = pliNode.querySelector(".bc-portlet__line-item-label");
    label.innerHTML = lineItem.label;
    input.setAttribute("data-value-key", lineItem.key);
    return pliNode;
  }

  function getPortlet(portlet) {
    let portletNode = portletTemplate.cloneNode(true),
        portletNodeTitle = portletNode.querySelector(".bc-portlet__title"),
        portletRetrievedAt = portletNode.querySelector(".bc-portlet__data-retrieved-at"),
        portletLineItems = portletNode.querySelector(".bc-portlet__line-items");
        console.log(portletLineItems);
    portletNodeTitle.innerHTML = portlet.title;
    portletRetrievedAt.setAttribute("data-retrieved-at-key", portlet.retrievedAtKey);
    if (portlet.lineItems) {
      console.log(portlet.lineItems);
      portlet.lineItems.forEach(function(li){
        portletLineItems.append(getPortletLineItem(li));
      });
    }
    return portletNode;
  }

  function getPortletGrid(portlets) {
    let gridNode = gridTemplate.cloneNode(true);
    portlets.forEach(function(portlet){
      gridNode.append(getPortlet(portlet));
    });
    return gridNode;
  }

  function getMarketplaceFees(salePrice, feesKey) {
    switch(feesKey) {
      case 'boFees':
        return BC.Utils.getBrickOwlSellerFees(salePrice);
        break;
    }
  }

  function updatePortletValues(p, data, setCost) {
    const lineItemInputs = Array.from(p.querySelectorAll(".bc-portlet__line-item-input")),
          profitInput = p.querySelector(".bc-portlet__profit-input"),
          portletRetrievedAt = p.querySelector(".bc-portlet__data-retrieved-at"),
          retrievedAtKey = portletRetrievedAt.getAttribute("data-retrieved-at-key"),
          liKeys = lineItemInputs.map(function(li){ return li.getAttribute("data-value-key"); }),
          marketplaceValueKey = liKeys.find(function(k){ console.log(k, data); return data.hasOwnProperty(k); }),
          marketplaceValue = marketplaceValueKey ? data[marketplaceValueKey] : false,
          marketplaceFeesKey = liKeys.find(function(k){ return k.toLowerCase().includes("fees"); }),
          marketplaceFees = marketplaceFeesKey && marketplaceValue ? getMarketplaceFees(marketplaceValue, marketplaceFeesKey) : false;

    if (data.hasOwnProperty(retrievedAtKey)) {
      portletRetrievedAt.setAttribute("datetime", data[retrievedAtKey]);
      timeago().render(portletRetrievedAt);
    }

    let profit = Math.abs(setCost) * -1, 
        portletValues = {
          setCost: setCost
        };

    if (marketplaceValue) {
      portletValues[marketplaceValueKey] = marketplaceValue;
      profit += marketplaceValue;
      
      if (marketplaceFees) {
        portletValues[marketplaceFeesKey] = marketplaceFees;
        profit -= marketplaceFees;
      } else {
        console.log("Could not calculate marketplace fees", liKeys);
      }

      lineItemInputs.forEach(function(i){
        const key = i.getAttribute("data-value-key");
        i.value = BC.Utils.formatCurrency(portletValues[key]);
      });

      profitInput.value = BC.Utils.formatCurrency(profit);
    } else {
      console.log("Marketplace Value not found", liKeys);
    }

  }

  const updateAllPortletValues = function updateAllPortletValues(data, setCost) {
    const portlets = document.querySelectorAll(".bc-portlet"),
          cost = parseFloat(setCost, 10);

    portlets.forEach(function(p){
      updatePortletValues(p, data, cost);
    })
  }

  const buildLayout = function buildLayout() {
    const layout = getLayout();
    let layoutHtml;
    layout.forEach(function(portletSection){
      portletWrapper.append(getSectionHeader(portletSection.header));
      portletWrapper.append(getPortletGrid(portletSection.portlets));
    });
  }

  const initialize = function initialize() {
    portletTemplate = document.getElementById('bc-portlet-template');
    portletLineItemTemplate = portletTemplate.querySelector('.bc-portlet__line-item');
    headerTemplate = document.getElementById('bc-portlet-section-header-template');
    gridTemplate = document.getElementById('bc-portlet-grid-template');
    portletWrapper = document.querySelector('.bc-portlet-section-wrapper');
    portletLineItemTemplate.parentNode.removeChild(portletLineItemTemplate);
    portletTemplate.parentNode.removeChild(portletTemplate);
    headerTemplate.parentNode.removeChild(headerTemplate);
    gridTemplate.parentNode.removeChild(gridTemplate);
    portletTemplate.removeAttribute("id");
    headerTemplate.removeAttribute("id");
    gridTemplate.removeAttribute("id");
  }

  return {
    initialize: initialize,
    buildLayout: buildLayout,
    updateAllPortletValues: updateAllPortletValues
  }
}();

// 'use strict';
// BC.PortletPricePerPiece = function() {
//   const msrpPPPInputId = 'ppp-msrp',
//         userPPPInputId = 'ppp-your-price';

//   let msrpPPP,
//       userPPP;

//   const update = function update(setData, purchasePrice) {
//     msrpPPP = document.getElementById(msrpPPPInputId);
//     userPPP = document.getElementById(userPPPInputId);
//     const partCount = setData.pcs;
//     console.log(setData);

//     if (partCount !== null) {
//       if (setData.msrp !== null) {
//         msrpPPP.value = BC.Utils.formatCurrency(setData.msrp / partCount) + " per piece";
//       }

//       userPPP.value = BC.Utils.formatCurrency(purchasePrice / partCount) + " per piece";
//     }
//   }

//   return {
//     update: update
//   }
// }();

'use strict';
BC.PortletPartOutBrickOwl = function() {
  const boPoNewInputId = 'bo-po-new',
        boPoUsedInputId = 'bo-po-used',
        boPoNewProfitInputId = 'bo-po-profit-new',
        boPoUsedProfitInputId = 'bo-po-profit-used',
        boPoCostNewInputId = 'bo-po-cost-new',
        boPoCostUsedInputId = 'bo-po-cost-used';

  let boPoNew,
      boPoUsed,
      boPoNewProfit,
      boPoUsedProfit,
      boPoCostNew,
      boPoCostUsed;

  const update = function update(setData, purchasePrice) {
    boPoNew = document.getElementById(boPoNewInputId);
    boPoUsed = document.getElementById(boPoUsedInputId);
    boPoNewProfit = document.getElementById(boPoNewProfitInputId);
    boPoUsedProfit = document.getElementById(boPoUsedProfitInputId);
    boPoCostNew = document.getElementById(boPoCostNewInputId);
    boPoCostUsed = document.getElementById(boPoCostUsedInputId);

    if (setData.boPON) {
      const newValue = setData.boPON,
            usedValue = setData.boPOU;

      if (newValue !== null) {
        boPoNew.value = BC.Utils.formatCurrency(newValue);
        boPoCostNew.value = BC.Utils.formatCurrency(purchasePrice);
        boPoNewProfit.value = BC.Utils.formatCurrency(newValue - purchasePrice);
      }

      if (usedValue !== null) {
        boPoUsed.value = BC.Utils.formatCurrency(usedValue);
        boPoCostUsed.value = BC.Utils.formatCurrency(purchasePrice);
        boPoUsedProfit.value = BC.Utils.formatCurrency(usedValue - purchasePrice);
      }
    }
  }

  return {
    update: update
  }
}();

'use strict';
BC.SetSummary = function() {
  const numberSelector = '.bc-set-summary__number',
        yearSelector = '.bc-set-summary__year',
        titleSelector = '.bc-set-summary__title',
        pcsSelector = '.bc-set-summary__pcs-count',
        msrpSelector = '.bc-set-summary__msrp-value';

  let number,
      year,
      title,
      pcs,
      msrp;

  const initialize = function initialize() {
    number = document.querySelector(numberSelector);
    year = document.querySelector(yearSelector);
    title = document.querySelector(titleSelector);
    pcs = document.querySelector(pcsSelector);
    msrp = document.querySelector(msrpSelector);
  }

  const update = function update(setData) {
    console.log(setData, number, year, title, setData.t);
    const setNumber = typeof setData.nv === 'undefined' ? setData.n : setData.n + '-' + setData.nv;
    number.innerHTML = setNumber;
    year.innerHTML = setData.y;
    title.innerHTML = setData.t;
    pcs.innerHTML = setData.pcs;
    msrp.innerHTML = parseFloat(setData.msrp, 10) > 0 ? "$" + setData.msrp : "Unknown";
  }

  return {
    initialize: initialize,
    update: update
  }
}();
